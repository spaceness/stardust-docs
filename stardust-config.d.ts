export interface Config { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The URL of the database to connect to. app/ content/ public/ databaseUrl: string; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The public URL of your Stardust instance. Use this if you want to display site metadata. app/ content/ public/ metadataUrl?: string; docker: DockerConfig; auth: AuthConfig; session?: SessionConfig; } export interface DockerConfig { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The type of connection to use to connect to the Docker daemon. README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json @default "socket" app/ content/ public/ type?: "http" | "socket"; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The path to the Docker socket to connect to, if using a socket connection. README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json @default "/var/run/docker.sock" app/ content/ public/ socket?: string; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The host to connect to, if using an HTTP connection. app/ content/ public/ host?: string; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The port for the docker host, if using an HTTP connection. app/ content/ public/ port?: number; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The Docker network used for connecting to containers app/ content/ public/ network: string; } export interface AuthConfig { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The JWT secret used to sign tokens. app/ content/ public/ secret: string; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json Cloudflare turnstile configuration. Leave `undefined` to disable turnstile. app/ content/ public/ turnstile?: { secret: string; siteKey: string; }; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json Credentials configuration. Leave `undefined` to disable user/password signups. app/ content/ public/ credentials?: { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json Whether to allow user signups. README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json @default false app/ content/ public/ signups?: boolean; }; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json OAuth configuration. Leave `undefined` to disable OAuth signups. app/ content/ public/ oauth?: { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The OAuth providers to enable. app/ content/ public/ providers: { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json the provider name app/ content/ public/ [key: string]: { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The client ID for the OAuth provider. app/ content/ public/ clientId: string; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The client secret for the OAuth provider. app/ content/ public/ clientSecret: string; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The OAuth provider's issuer, if applicable. app/ content/ public/ issuer?: string; }; }; }; } export interface SessionConfig { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json The amount of time to keep an inactive session alive for, in minutes. README.md app content mdx-components.tsx next.config.mjs package.json pnpm-lock.yaml postcss.config.js public stardust-config.d.ts tailwind.config.js tsconfig.json @default 1440 app/ content/ public/ keepaliveDuration?: number; }
